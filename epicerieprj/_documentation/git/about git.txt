1. you need to initialize it as a Git repository. The command for this is:

git init

# this creates the ".git" with example "D:/_alltechwebserver/homeprj/.git/", where "D:/_alltechwebserver/homeprj/" is the folder that will be in git


====
After running this command, your current folder becomes a Git repository, but files aren't automatically tracked. To start tracking your files, you'll need to:

2. Add files to the staging area:
git add .

3. Commit the staged files:
git commit -m "Initial commit"

This creates your first commit with the message "Initial commit".


5. Configure user information (if you haven't already):
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"



======= Creating a New Repository on GitHub ========
To connect your local repository to a new GitHub repository:

1. Create a new repository on GitHub:

- Go to GitHub and log in
- Click the "+" icon in the top-right corner
- Select "New repository"
- Name your repository
- Don't initialize with README, .gitignore, or license (as you already have files locally)
- Click "Create repository"
This is the created repository "https://github.com/aiteampinoy/alltechsolution.git"

2. Connect your local repository to GitHub:
git remote add origin https://github.com/aiteampinoy/alltechsolution.git
This adds GitHub as a remote named "origin"


3. Push your local repository to GitHub:
git push -u origin main


The project are now pushed to github


=====================================
Pull latest changes from GitHub:
git pull origin main


======================================
After saving your file normally, you'll want to commit your changes to Git:

1. Check what files have been changed:
git status

2. Add your files to the staging area:
git add filename.extension    # For a specific file
git add .                     # For all changed files

3. Commit your changes with a descriptive message:
git commit -m "Complete implementation of [feature/program]"

4. Push to GitHub (if you're using it):
git push origin main


======================
Creating a Release or Backup
For a completed program you might want to:

1. Create a Git tag for the version:
git tag -a v1.0 -m "Version 1.0"
git push origin v1.0

2. Create a GitHub Release:
- Go to your repository on GitHub
- Click on "Releases"
- Click "Create a new release"
- Select your tag
- Add release notes
- Optionally attach compiled binaries


3. Create a backup archive:
# On Windows (PowerShell):
Compress-Archive -Path .\project\ -DestinationPath project_v1.0.zip

# On Linux/Mac:
zip -r project_v1.0.zip ./project/

=====================================
Reverting to a Previous Version in Git

There are several ways to go back to a previous version of your code in Git, depending on your specific needs:
1. View Commit History First
a. Before reverting, you'll want to identify which version to go back to:
git log

b. This shows you the commit history with commit IDs (hashes). You can also use:
git log --oneline

2. Options for Reverting
a. Temporarily Check Out a Previous Version
To view (but not permanently switch to) a previous commit:
git checkout abc1234

(Replace abc1234 with the actual commit hash)

This puts you in a "detached HEAD" state. To go back to the latest version:
git checkout main

b. Revert a Specific Commit
To create a new commit that undoes a previous commit's changes:
git revert abc1234
This is safe for shared repositories as it doesn't alter history.

c. Reset to a Previous State
To actually move your branch pointer back to a previous state:
git reset abc1234          # Keeps changes as unstaged modifications
git reset --soft abc1234   # Keeps changes staged
git reset --hard abc1234   # Discards all changes (CAUTION!)
WARNING: git reset --hard is destructive and will permanently remove uncommitted changes!

d. Reset a Single File to a Previous Version
To restore just one file to a previous state:
git checkout abc1234 -- path/to/file.ext
Then commit the change:
git commit -m "Restore file.ext to previous version"


e. Create a New Branch from an Old Commit
If you want to work from an old version without losing current work:
git checkout -b old-version-branch abc1234


2. For Changes Already Pushed to GitHub
If you've already pushed changes to GitHub and want to revert:

a. Use git revert (safest option)
b. If you use git reset, you'll need to force push:
git push --force origin main

CAUTION: Force pushing rewrites history and can cause problems for collaborators!




************

useful commands:
git status
git log

Create and switch to a new branch:
git checkout -b new-branch-name

